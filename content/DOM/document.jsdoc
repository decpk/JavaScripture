Document : Node

Spec:
https://dom.spec.whatwg.org/#interface-document

AlternateSpec:
https://html.spec.whatwg.org/#document

----
instance.activeElement : Element

Returns the currently focused element. If there is no focused element,
returns %%#body|**this.body**%%.

See also
%%/hasFocus|**hasFocus()**%%,
%%/Window#onblur|**window.onblur**%%, and
%%/Window#onfocus|**window.onfocus**%%.

<htmlexample>
<!-- Try tabbing around the elements in the example -->
<input value='input 1'><br>
<button>button</button><br>
<input value='input 3'>
<div>
  activeElement: <span id='activeElement'></span>
</div>
<script>
  var activeElementOutput = document.getElementById('activeElement');

  var onFocusChange = function() {
    activeElementOutput.textContent = document.activeElement.tagName;
  };

  window.addEventListener('focus', onFocusChange, true);
  window.addEventListener('blur', onFocusChange, true);
</script>
</htmlexample>


----
instance.body : HTMLBodyElement

----
instance.characterSet : String


----
instance.compatMode : String


----
instance.contentType : String


----
instance.cookie : String

Returns the cookies sent to the server when requesting resources.
You can add additional cookies by setting **'key=value'** strings
to **cookie**.  This will replace any existing value for the specified
cookie but will not affect other cookies. You may append additional metadata
for the cookie by adding **';metadata-key1=metadata-value1;metadata-key2=metadata-value2;...'**
to the end of the string when setting the cookie.  See
%%http://www.ietf.org/rfc/rfc2965.txt|Set Cookie Syntax (on page 5)%% for more
details on the supported metadata keys and values.

<htmlexample>
<script>
  var getCookies = function() {
    if (document.cookie.length === 0) {
      return {};
    }

    // Split on ';' followed by spaces
    var cookies = document.cookie.split(/;\s*/g);

    // Get the property/value pairs for each cookie
    var entries = cookies.map(function(cookie) {
      return cookie.split('=');
    });

    return Object.fromEntries(entries);
  };

  var clearCookies = function() {
    var cookies = getCookies();
    for (var key in cookies) {
      // Remove a cookie by setting its expires time in the past
      document.cookie = key + '=;expires=' + new Date(0).toUTCString();
    }
  };

  clearCookies();

  document.cookie = 'MyCookie=ChocolateChip';
  console.log(document.cookie);

  document.cookie = 'MyIceCream=Mint';
  console.log(document.cookie);

  var cookies = getCookies();
  console.dir(cookies)
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-8747038

----
instance.doctype : DocumentType


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-B63ED1A31

ReadOnly:
true

----
instance.documentElement : Element

Usually a %%/HTMLHtmlElement|**HTMLHtmlElement**%%.

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-87CD092

ReadOnly:
true


----
instance.documentURI : String

<htmlexample>
<script>
  console.log(document.URL);
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Document3-documentURI

----
instance.fullscreenEnabled : Boolean

**true** if the %%/Element#requestFullscreen|**element.requestFullscreen()**%% API is
enabled.

ReadOnly:
true

Spec:
https://fullscreen.spec.whatwg.org/#dom-document-fullscreenenabled

----
instance.fullscreenElement : Element

The element that is currently fullscreen from a call to %%/Element#requestFullscreen|**element.requestFullscreen()**%%.

ReadOnly:
true

Spec:
https://fullscreen.spec.whatwg.org/#dom-document-fullscreenelement

----
instance.pointerLockElement : Element

The element that currently has the pointer locked by a call to %%/Element#requestPointerLock|**element.requestPointerLock()**%%.

ReadOnly:
true

Spec:
https://w3c.github.io/pointerlock/#dom-documentorshadowroot-pointerlockelement

----
instance.implementation : DOMImplementation

Spec:
https://dom.spec.whatwg.org/#dom-document-implementation

ReadOnly:
true

----
instance.title : String

Sets the title of the window.

<htmlexample>
<button onclick="setTitle()">Set Title</button>
<script>
  var setTitle = function() {
    // Grab the parent of the example (ie, the
    // www.javascripture.com window) and set its title.
    var javascriptureWindow = window.parent;
    javascriptureWindow.document.title = 'foo';
  }
</script>
</htmlexample>


----
instance.readyState : String

Returns
**'loading'** while **this** is loading,
**'interactive'** when **this** has loaded but not all subresources are loaded,
and
**'complete'** once **this** and all subresources are loaded.

<htmlexample>
<script>
  console.log('in script: ' + document.readyState);

  window.addEventListener('DOMContentLoaded', function() {
    console.log('in DOMContentLoaded: ' + document.readyState);
  });

  window.onload = function() {
    console.log('in onload: ' + document.readyState);
  };
</script>
</htmlexample>

----
instance.styleSheets : StyleSheetList


----
instance.URL : String

----
prototype.append(node0 : Node, [node1 : Node, [...]]) : undefined

----
prototype.adoptNode(source : Node) : Node

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Document3-adoptNode


----
prototype.createEvent(eventInterfaceName : String) : Event


----
prototype.createRange() : Range

----
prototype.createNodeIterator(root : Node, [whatToShow : Number, [filter : NodeFilter]]) : NodeIterator

----
prototype.createTreeWalker(root : Node, [whatToShow : Number, [filter : NodeFilter]]) : TreeWalker

----
prototype.createElement(tagName : String, [typeExtension : String]) : Element

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-2141741547

----
prototype.createElementNS(namespaceURI : String, qualifiedName : String, [typeExtension : String]) : Element

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-DocCrElNS


----
prototype.createDocumentFragment() : DocumentFragment


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-35CB04B5


----
prototype.createTextNode(data : String) : Text


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1975348127


----
prototype.createComment(data : String) : Comment


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1334481328


----
prototype.createProcessingInstruction(target : String, data : String) : ProcessingInstruction


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-135944439

----
prototype.exitFullscreen() : Promise<undefined>

Exits fullscreen mode. See also %%/Element#requestFullscreen|**element.requestFullscreen()**%%.

<htmlexample>
<div style="background: pink;">
  Element
  <button id="enter">Enter Fullscreen</button>
  <button id="exit">Exit Fullscreen</button>
</div>
<script>
document.querySelector('#enter').onclick = async () => {
  const div = document.querySelector('div');
  if (div.requestFullscreen) {
    await div.requestFullscreen();
  }
  else if (div.webkitRequestFullscreen) {
    div.webkitRequestFullscreen();
  }
};
document.querySelector('#exit').onclick = async () => {
  if (document.exitFullscreen) {
    await document.exitFullscreen();
  }
  else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  }
};
</script>
</htmlexample>


Spec:
https://fullscreen.spec.whatwg.org/#dom-document-exitfullscreen

----
prototype.exitPointerLock() : undefined

Releases the pointer locked with %%/Element#requestPointerLock|element.requestPointerLock()%%.

<htmlexample>
<button id="request">Request Pointer Lock</button>
<pre id="output" style="background: #eee; height: 100px">
<script>
document.querySelector('#request').onclick = (e) => {
  document.body.requestPointerLock();
  e.stopPropagation();
};
document.body.onclick = () => {
  document.exitPointerLock();
};
document.body.onmousemove = (e) => {
  const output = document.getElementById('output');
  output.textContent = 'hasPointerLock: ' + !!document.pointerLockElement + '\n' +
                       'movementX: ' + e.movementX + '\n' + 
                       'movementY: ' + e.movementY;
};
</script>
</htmlexample>

Spec:
https://w3c.github.io/pointerlock/#dom-document-exitpointerlock

----
prototype.getElementsByTagName(tagName : String) : NodeList

Returns a NodeList containing the %%/Element|Elements%% in the document
that have the %%/Element#tagName|**Element.tagName**%% equal to **tagName**
(case insensitive).

The returned NodeList will update as the document changes.

<htmlexample>
<div>foo</div>
<div>bar</div>
<script>
  var divs = document.getElementsByTagName('div');

  console.log(divs.length);
  for (var i = 0; i < divs.length; i++) {
    console.log(divs[i].textContent);
  }
  console.log();

  // The divs NodeList will update automatically when you add
  // another div
  var baz = document.createElement('div');
  baz.textContent = 'baz';
  document.body.appendChild(baz);

  console.log(divs.length);
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-A6C9094

----
prototype.getElementsByTagNameNS(namespaceURI : String, localName : String) : NodeList

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-getElBTNNS

----
prototype.getElementsByClassName(classNames : String) : NodeList

Returns a NodeList containing the %%/Element|Elements%% in the document
where the %%/Element#className|**Element.className**%%
matches the specified **classNames**.

**classNames** can contain multiple classes, separated by spaces,
and the returned Elements must contain all the classes.

The returned NodeList will update as the document changes.

<htmlexample>
<div class='foo bar'>div1</div>
<div class='foo'>div2</div>
<script>
  var foos = document.getElementsByClassName('foo');

  console.log('foos.length = ' + foos.length);

  var fooBars = document.getElementsByClassName('bar foo');
  console.log('fooBars.length = ' + fooBars.length);

  // Adding the 'bar' class to div2 will update fooBars automatically
  foos[1].classList.add('bar');
  console.log('fooBars.length = ' + fooBars.length);
</script>
</htmlexample>

----
prototype.getElementById(elementId : String) : Element

Returns the Element in the document that has %%/Element#id|Element.id%%
equal to **elementId**.

<htmlexample>
<div id='foo'></div>
<script>
  var foo = document.getElementById('foo');

  foo.textContent = 'My Div';
</script>
</htmlexample>


Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-getElBId

----
prototype.hasFocus() : Boolean

Returns **true** if the document has keyboard focus.
See also
%%/activeElement|**activeElement**%%,
%%/Window#onblur|**window.onblur**%%, and
%%/Window#onfocus|**window.onfocus**%%.

<htmlexample>
<!-- Click between this box and example to change focus -->
<input id='input'>
<div>
  Has focus: <span id='hasFocus'></span>
</div>
<script>
  var hasFocusElement = document.getElementById('hasFocus');

  var onFocusChange = function() {
    hasFocusElement.textContent = document.hasFocus();
  };

  window.addEventListener('focus', onFocusChange);
  window.addEventListener('blur', onFocusChange);
</script>
</htmlexample>

----
prototype.importNode(importedNode : Node, deep : Boolean) : Node

Spec:
http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Core-Document-importNode


----
prototype.prepend(node0 : Node, [node1 : Node, [...]]) : undefined

----
prototype.querySelector(selectors : String) : Element

Returns the first **Element** that matches the CSS selector.

<htmlexample>
<span id='foo'>foo1</span>
<span class='bar'>
  <span class='baz'>baz1</span>
</span>
<span class='baz'>baz2</span>
<script>
  var foo = document.querySelector('#foo');
  console.log(foo.innerHTML);

  var baz = document.querySelector('.baz');
  console.log(baz.innerHTML);

  var baz2 = document.querySelector('body > .baz');
  console.log(baz2.innerHTML);
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/selectors-api/#queryselector

----
prototype.querySelectorAll(cssSelector : String) : NodeList

Returns a **NodeList** containing the **Element**s in the document that
match the CSS selector.

Note that unlike %%#getElementsByClassName|**getElementsByClassName()**%%
or %%#getElementsByTagName|**getElementsByTagName()**%%,
the returned NodeList does not update as the document changes.

<htmlexample>
<span id='foo'>foo1</span>
<span class='bar'>
  <span class='baz'>baz1</span>
</span>
<span class='baz'>baz2</span>
<script>
  var all = document.querySelectorAll('#foo, .baz');
  console.log(all.length);
  for (var i = 0; i < all.length; i++) {
    console.log(all[i].innerHTML);
  };
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/selectors-api/#queryselectorall

----
event.abort : listener(event : Event) : undefined

----
event.fullscreenchange : listener(event : Event) : undefined

Spec:
https://fullscreen.spec.whatwg.org/#handler-document-onfullscreenchange

----
event.fullscreenerror : listener(event : Event) : undefined

Spec:
https://fullscreen.spec.whatwg.org/#handler-document-onfullscreenerror

----
event.load : listener(event : Event) : undefined

----
event.readystatechange : listener(event : Event) : undefined

----
event.touchstart : listener(event : TouchEvent) : undefined

Called when the user begins touching the element.

Bubbles:
true

Cancelable:
true

Spec:
http://www.w3.org/TR/touch-events/#dfn-touchstart

----
event.touchend : listener(event : TouchEvent) : undefined

Called when the user stops touching the element.

Bubbles:
true

Cancelable:
true

Spec:
http://www.w3.org/TR/touch-events/#dfn-touchend

----
event.touchmove : listener(event : TouchEvent) : undefined

Called when the user moves while touching the element.

Bubbles:
true

Cancelable:
true

Spec:
http://www.w3.org/TR/touch-events/#dfn-touchmove

----
event.touchcancel : listener(event : TouchEvent) : undefined

Bubbles:
true

Cancelable:
false

Spec:
http://www.w3.org/TR/touch-events/#dfn-touchcancel

----
event.copy : listener(event : ClipboardEvent) : undefined

Bubbles:
true

Cancelable:
true

Spec:
https://w3c.github.io/clipboard-apis/#clipboard-event-copy

----
event.cut : listener(event : ClipboardEvent) : undefined

Bubbles:
true

Cancelable:
true

Spec:
https://w3c.github.io/clipboard-apis/#clipboard-event-cut

----
event.paste : listener(event : ClipboardEvent) : undefined

Bubbles:
true

Cancelable:
true

Spec:
https://w3c.github.io/clipboard-apis/#clipboard-event-paste

----
event.pointerlockchange : listener(event : Event) : undefined

Bubbles:
false

Spec:
https://w3c.github.io/pointerlock/#dom-document-onpointerlockchange

----
event.pointerlockerror : listener(event : Event) : undefined

Bubbles:
false

Spec:
https://w3c.github.io/pointerlock/#dom-document-onpointerlockerror
