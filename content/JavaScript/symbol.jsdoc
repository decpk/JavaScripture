Symbol : Object

Symbols are an alternate to using %%/String|Strings%% as the
keys for properties. Symbols allow hiding properties on Objects
since you can only access the values if you have the same instance of the
Symbol.
You access a property with a Symbol key using 
%%/Object#indexer_Symbol|object[symbol]%%.

Version:
ECMAScript 2015

Primitive:
true

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol-objects

----
Symbol([description : String]) : Symbol

Creates a new Symbol with an optional description.

<example>
var myObject = { foo: 'bar' };

var mySymbol = Symbol('MySymbol');

myObject[mySymbol] = 'baz';

console.log(myObject[mySymbol]);

// The property cannot be accessed using a string
console.log(myObject['MySymbol']);
</example>

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol-description

----
instance.description : String

Returns the description passed to the Symbol during construction.

<example>
var mySymbol = Symbol('MySymbol');
console.log(mySymbol.description);
</example>

Spec:
https://tc39.es/ecma262/#sec-symbol.prototype.description

Version:
ECMAScript 2019

----
asyncIterator : Symbol

Spec:
https://tc39.es/ecma262/#sec-symbol.asynciterator

----
hasInstance : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.hasinstance

----
isConcatSpreadable : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.isconcatspreadable

----
iterator : Symbol

The Symbol that retrieves a function that returns an
%%/Iterator|iterator%% for the Object.

<example>
// Array's iterator function is also exposed as 'values'
var arrayIterator = Array.prototype[Symbol.iterator];
console.log(arrayIterator === Array.prototype.values);

var x = ['a', 'b', 'c'];

// The following are all equivalent:
for (var item of x[Symbol.iterator]()) {
  console.log(item);
}

// for (... of ...) automatically invokes the iterator function
for (var item of x) { 
  console.log(item);
}

// Array[Symbol.iterator] is also available through Array.values
for (var item of x.values()) {
  console.log(item);
}
</example>

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.iterator

----
match : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.match

----
matchAll : Symbol

Spec:
https://tc39.es/ecma262/#sec-symbol.matchall

----
replace : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.replace

----
search : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.search

----
species : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.species

----
split : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.split

----
toPrimitive : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.toprimitive

----
toStringTag : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.tostringtag

----
unscopables : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.unscopables

----
for(key : String) : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.for

----
keyFor(key : String) : Symbol

Spec:
http://www.ecma-international.org/ecma-262/10.0/#sec-symbol.for
