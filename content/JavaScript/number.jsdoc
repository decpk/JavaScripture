Number : Object

A numerical value. JavaScript stores numbers as 64 bit (8 byte) double 
precision floats. See %%/Math|Math%% for helpful math related functions.
See also %%/BigInt|BigInt%%.

Primitive:
true

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7

----
Number(value : BigInt) : Number

Converts the specified BigInt to a Number. For **value**s outside the range
%%#MIN_SAFE_INTEGER|MIN_SAFE_INTEGER%% to
%%#MAX_SAFE_INTEGER|MAX_SAFE_INTEGER%%, the returned Number may be an
approximation of **value**.

<example>
var x = Number(100n);
console.log(x);
</example>

Spec:
https://tc39.es/ecma262/#sec-bigint.asintn

Version:
ECMAScript 2020

----
Number(value : Object) : Number

Coerces **value** to a number. Usually this method is not necessary since
JavaScript will automatically coerce a value to a number when it is 
used in a number context.  **+value** is another way to coerce a value
to a number. This coercion is very strict and will return %%#NaN|**NaN**%%
if the specified value cannot be converted to a **Number**. %%/Global#parseInt|**parseInt**%%
and %%/Global#parseFloat|**paseFloat**%% can also be used to convert a %%/String|**String**%%
to a **Number**.

<example>
var one = '1';
console.log(one + 2); // 2 is converted to '2' and concatenated with '1'
console.log(Number(one) + 2); // convert '1' to a number first
console.log(+one + 2); // another way to convert to a number 
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.1.1


----
new Number(value : Number) : Object

Creates a box for **value**.

<example>
var literal = 123;
var boxed = new Number(123);
literal.foo = "bar";
boxed.foo = "bar";
console.log(literal.foo);
console.log(boxed.foo);
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.2.1


----
prototype.toExponential([fractionalDigits : Number]) : String

Returns a string representation of **this** in scientific notation. If 
**fractionalDigits** is specified, that many digits will follow the '.'.  

<example>
var x = 123.456;
console.log(x.toExponential());
console.log(x.toExponential(2));
console.log(x.toExponential(6));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.6


----
prototype.toFixed([fractionalDigits = 0 : Number]) : String

Returns a string representation of **this** with fractionalDigits following
the '.'. 

<example>
var x = 123.456;
console.log(x.toFixed());
console.log(x.toFixed(2));
console.log(x.toFixed(6));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.5


----
prototype.toPrecision(precision : Number) : String

Returns a string representation of **this** with **precision** 
significant digits. 

<example>
var x = 123.456;
console.log(x.toPrecision(1));
console.log(x.toPrecision(2));
console.log(x.toPrecision(3));
console.log(x.toPrecision(4));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.7


----
prototype.toString([base = 10 : Number]) : String

Returns a string representation of **this** in the specified **base**.  
**base** must be an integer between **2** and **36**.

<example>
var x = 0x123ABC;
console.log(x.toString());
console.log(x.toString(16));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.2


----
prototype.toLocaleString([locales : Array<String>, [options : { \
  currency : String /* */, \
  currencyDisplay : String /* */, \
  localeMatcher : String /* */, \
  maximumFractionDigits : Number /* */, \
  maximumSignificantDigits : Number /* */, \
  minimumFractionDigits : Number /* */, \
  minimumIntegerDigits : Number /* */, \
  minimumSignificantDigits : Number /* */, \
  style : String /* */, \
  useGrouping : Boolean /* */, \
}]]) : String

Returns a string representation of **this** that conforms to the number format
specification of the current locale.

<example>
var x = 123.456;
console.log(x.toString());
console.log(x.toLocaleString());
</example>

Spec:
http://www.ecma-international.org/ecma-402/1.0/#sec-13.2.1

----
EPSILON : Number

**EPSILON** is the difference between **1** and the next Number 
greater than 1 that is representable in JavaScript.

<example>
console.log(Number.EPSILON);
console.log(1 + Number.EPSILON);

// 1 plus a number smaller than EPSILON will either round
// to 1 or (1 + EPSILON)
var x = 1 + (Number.EPSILON * 0.8);
console.log(x);
console.log(x - 1);
</example>

ReadOnly:
true

Version:
ECMAScript 2015

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-number.epsilon

----
MAX_SAFE_INTEGER : Number

The largest possible integer such that **MAX_SAFE_INTEGER** 
and **MAX_SAFE_INTEGER + 1** can both be represented exactly 
in JavaScript.

See also %%#MIN_SAFE_INTEGER|**MIN_SAFE_INTEGER**%% and 
%%#isSafeInteger|**Number.isSafeInteger()**%%.

<example>
console.log(Number.MAX_SAFE_INTEGER);
console.log(Number.MAX_SAFE_INTEGER + 1);
console.log(Number.MAX_SAFE_INTEGER + 2);
</example>

ReadOnly:
true

Version:
ECMAScript 2015

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-number.MAX_SAFE_INTEGER

----
MAX_VALUE : Number

The largest possible Number less than infinity that can be represented in
JavaScript.

<example>
console.log(Number.MAX_VALUE);
</example>

ReadOnly:
true

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.3.2

----
MIN_SAFE_INTEGER : Number

The smallest possible integer such that **MIN_SAFE_INTEGER** 
and **MIN_SAFE_INTEGER - 1** can both be represented exactly 
in JavaScript.

See also %%#MAX_SAFE_INTEGER|**MAX_SAFE_INTEGER**%% and 
%%#isSafeInteger|**Number.isSafeInteger()**%%.

<example>
console.log(Number.MIN_SAFE_INTEGER);
console.log(Number.MIN_SAFE_INTEGER - 1);
console.log(Number.MIN_SAFE_INTEGER - 2);
</example>

ReadOnly:
true

Version:
ECMAScript 2015

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-number.MIN_SAFE_INTEGER

----
MIN_VALUE : Number

The smallest possible Number greater than 0 that can be represented in
JavaScript.

<example>
console.log(Number.MIN_VALUE);
</example>

ReadOnly:
true

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.3.3

----
NaN : Number

Floating point Not a Number. Signifies an error in a calculation.
**NaN** is never equal to another **Number**, even if it is **NaN**.
To check if something is **NaN**, use 
%%Global#isNaN|isNan()%% or
%%#isNaN|Number.isNan()%%.

Also exists as %%Global#NaN|**NaN**%% in the global namespace.

<example>
console.log(Number.NaN);
console.log(NaN);
console.log(0/0);
console.log(Math.sqrt(-1));
</example>

ReadOnly:
true

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.3.4

----
NEGATIVE_INFINITIY : Number

Negative infinity.

<example>
console.log(Number.NEGATIVE_INFINITY);
console.log(-Infinity);
console.log(-1/0);
</example>

ReadOnly:
true

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.3.5

----
POSITIVE_INFINITIY : Number

Positive infinity.

Also exists as %%Global#Infinity|**Infinity**%% in the global namespace.

<example>
console.log(Number.POSITIVE_INFINITY);
console.log(Infinity);
console.log(1/0);
</example>

ReadOnly:
true

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.3.6

----
isFinite(x : Number) : Boolean

Returns **true** if **x** is not **NaN**, **+Infinity**, or **-Infinity**.
See also the global %%/Global#isFinite|**isFinite(x)**%% method.

<example>
console.log(Number.isFinite(0/0)); // 0/0 is NaN
console.log(Number.isFinite(1/0)); // 1/0 is infinity
console.log(Number.isFinite(1.2)); // 1.2 is finite

console.log();

// Compare Number.isFinite and global isFinite methods
console.log(Number.isFinite('0')); // The string '0' is not a Number
console.log(isFinite('0')); // The string '0' is converted to a Number
</example>

Version:
ECMAScript 2015

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-number.isFinite

----
isInteger(x : Number) : Boolean

Returns **true** if **x** is an integer.

<example>
console.log(Number.isInteger(0)); 
console.log(Number.isInteger(1.0));
console.log(Number.isInteger(1.2));
</example>

Version:
ECMAScript 2015

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-number.isInteger

----
isSafeInteger(x : Number) : Boolean

Returns **true** if **x** is greater than or equal to
%%Number#MIN_SAFE_INTEGER|**MIN_SAFE_INTEGER**%%
and less than or equal to 
%%Number#MAX_SAFE_INTEGER|**MAX_SAFE_INTEGER**%%.
Adding or subtracting **1** to numbers outside this range may not
produce a change in the value due to lack of floating point precision.

<example>
console.log(Number.isInteger(42)); 
console.log(Number.isSafeInteger(Number.MAX_SAFE_INTEGER));
console.log(Number.isSafeInteger(Number.MAX_SAFE_INTEGER + 1));
</example>

Version:
ECMAScript 2015

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-number.isSafeInteger

----
isNaN(x : Number) : Boolean

Returns **true** if **x** is %%/Number#NaN|**NaN**%%.
**NaN** is never equal to another **Number**, even if it is **NaN**,
so you must use **isNaN** to check for **NaN**.

See also the global %%/Global#isNaN|**isNaN(x)**%% method and
%%/Object#is|Object.is()%%.

<example>
var x = 0/0;
console.log(x === NaN); 
console.log(Number.isNaN(x)); 

</example>

Version:
ECMAScript 2015

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-number.isNaN

----
parseInt(str : String, [base : Number]) : Number

Converts **str** into an integral number. If **base** is not specified, **parseInt**
will attempt to determine the base to use depending on the input (**'0x'** prefix is base 16).
**parseInt** is less scrict than using **Number(str)** (or **+str**) to convert to a Number
because it ignores extra characters after the numeric portion of the string.
If the first character is not a valid number in the specified **base**, **parseInt** will
return %%#NaN|**NaN**%%.
Also exists as %%Global#parseInt|**parseInt**%% in the global namespace.

<example>
console.log(Number.parseInt('12'));
console.log(Number.parseInt('12.34')); // Ignores non digits
console.log(Number.parseInt('0x12')); // Autodetects base 16
console.log(Number.parseInt('12', 16)); // Force base 16
console.log(Number.parseInt('12e5')); // Doesn't support scientific notation
console.log(Number.parseInt('Infinity')); // Doesn't support infinity
console.log(Number.parseInt == parseInt); // Also available in the global namespace
</example>

Version:
ECMAScript 2015

Spec:
https://www.ecma-international.org/ecma-262/#sec-number-parsefloat-string

----
parseFloat(str : String) : Number

Converts **str** into a floating point number.
**parseFloat** is less scrict than using **Number(str)** (or **+str**) to convert to a Number
because it ignores extra characters after the numeric portion of the string.
If the first character is not a valid number, **parseFloat** will return %%#NaN|**NaN**%%.
Also exists as %%Global#parseFloat|**parseFloat**%% in the global namespace.

<example>
console.log(Number.parseFloat('12'));
console.log(Number.parseFloat('12.34'));
console.log(Number.parseFloat('0x12')); // Does not detect hex
console.log(Number.parseFloat('12e5')); // Supports scientific notation
console.log(Number.parseFloat('Infinity')); // Supports Infinity
console.log(Number.parseFloat === parseFloat); // Also available in the global namespace
</example>

Version:
ECMAScript 2015

Spec:
https://www.ecma-international.org/ecma-262/#sec-number-parsefloat-string
