Global : Object

The following are properties of the global object.  They can be accessed from
anywhere without additional qualifiers.

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1

----
globalThis : Window

The global **this** value. See also %%Window#globalThis|Window.globalThis%% and
%%WorkerGlobalScope#globalThis|WorkerGlobalScope.globalThis%%.

<example>
console.log(globalThis === this);
console.log(globalThis === globalThis.globalThis);
</example>

Version:
ECMAScript 2020

----
NaN : Number

Floating point Not a Number. Signifies an error in a calculation.
**NaN** is never equal to another **Number**, even if it is **NaN**.
To check if something is **NaN**, use %%#isNaN|**isNaN()**%%.

<example>
console.log(NaN);
console.log(0/0);
console.log(Math.sqrt(-1));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.1.1

----
Infinity : Number

Positive infinity. See also %%Number#POSITIVE_INFINITY|Number.POSITIVE_INFINITY%%.

<example>
console.log(Infinity);
console.log(1/0);
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.1.2

----
undefined: undefined

Returns the **undefined** type.  This value signifies no value has been
set on a property or that a method returned no value.

<example>
var x = {};
console.log(x.foo);
var noReturn = function() {};
console.log(noReturn());
</example>


Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.1.3

----
eval(code : String) : Object

Treats **code** as JavaScript and executes it, returning the result.

<example>
console.log(eval('1 + 1'));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.1

----
parseInt(str : String, [base : Number]) : Number

Converts **str** into an integral number. If **base** is not specified, **parseInt**
will attempt to determine the base to use depending on the input (**'0x'** prefix is base 16).
**parseInt** is less scrict than using **Number(str)** (or **+str**) to convert to a Number
because it ignores extra characters after the numeric portion of the string.
If the first character is not a valid number in the specified **base**, **parseInt** will
return %%#NaN|**NaN**%%.
See also %%#parseFloat|parseFloat%% and %%Number#parseInt|Number.parseInt%%.

<example>
console.log(parseInt('12'));
console.log(parseInt('12.34')); // Ignores non digits
console.log(parseInt('0x12')); // Autodetects base 16
console.log(parseInt('12', 16)); // Force base 16
console.log(parseInt('12e5')); // Doesn't support scientific notation
console.log(parseInt('Infinity')); // Doesn't support infinity
console.log(parseInt == Number.parseInt); // Also available on the Number object
</example>


Spec:
https://www.ecma-international.org/ecma-262/#sec-parseint-string-radix

----
parseFloat(str : String) : Number

Converts **str** into a floating point number.
**parseFloat** is less scrict than using **Number(str)** (or **+str**) to convert to a Number
because it ignores extra characters after the numeric portion of the string.
If the first character is not a valid number, **parseFloat** will return %%#NaN|**NaN**%%.
See also %%#parseInt|parseInt%% and %%Number#parseFloat|Number.parseFloat%%.

<example>
console.log(parseFloat('12'));
console.log(parseFloat('12.34'));
console.log(parseFloat('0x12')); // Does not detect hex
console.log(parseFloat('12e5')); // Supports scientific notation
console.log(parseFloat('Infinity')); // Supports Infinity
console.log(parseFloat === Number.parseFloat); // Also available on the Number object
</example>

Spec:
https://www.ecma-international.org/ecma-262/#sec-parsefloat-string

----
isNaN(x : Number) : Boolean

Returns **true** if **x** is %%/Number#NaN|**NaN**%%.
**NaN** is never equal to another **Number**, even if it is **NaN**,
so you must use **isNaN** to check for **NaN**.

If **x** is not a %%/Number|Number%%, it is first converted to a Number 
before checking if it is NaN. Use %%/Number#isNaN|**Number.isNaN(x)**%%
to prevent any conversion from happening.

See also %%/Object#is|Object.is()%%.

<example>
var x = 0/0;
console.log(x === NaN); 
console.log(isNaN(x)); 

console.log();

// Compare Number.isNaN and global isNaN methods
console.log(Number.isNaN('NaN')); // 'NaN' is a string, not a Number
console.log(isNaN('NaN')); // The 'NaN' string is first converted to a Number
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.4

----
isFinite(x : Object) : Boolean

Returns **true** if **x** is not **NaN**, **+Infinity**, or **-Infinity**.
If **x** is not a %%/Number|Number%%, it is first converted to a Number 
before checking if it is finite. Use %%/Number#isFinite|**Number.isFinite(x)**%%
to prevent any conversion from happening.

<example>
console.log(Number.isFinite(0/0)); // 0/0 is NaN
console.log(Number.isFinite(1/0)); // 1/0 is infinity
console.log(Number.isFinite(1.2)); // 1.2 is finite

console.log();

// Compare Number.isFinite and global isFinite methods
console.log(Number.isFinite('0')); // '0' is a string, not a Number
console.log(isFinite('0')); // The '0' string is first converted to a Number
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.5

----
decodeURI(encodedURI : String) : String

Returns a string that is the decoded version of %%#encodeURI|**encodeURI**%%.

<example>
console.log(decodeURI('http://foo/bar%20baz'));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.1

----
decodeURIComponent(encodedURIComponent : String) : String

Returns a string that is the decoded version of %%#encodeURIComponent|**encodeURIComponent**%%.

<example>
console.log(decodeURIComponent('http%3A%2F%2Ffoo%2Fbar%20baz'));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.2

----
encodeURI(uri : String) : String

Returns a string that is the encoded version of **uri**.

<example>
console.log(encodeURI('http://foo/bar baz'));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.3

----
encodeURIComponent(component : String) : String

Returns an encoded version of **component** that is suitable as a uri 
parameter, such as a query string.

<example>
console.log(encodeURIComponent('http://foo/bar baz'));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.4

